# specify the version of docker-compose
version: "3.8"

# define the services/containers to be run
services:
  
  web: # define the frontend service we can use any name for the service. A standard naming convention is to use "web" for the frontend
    depends_on: 
      - api
    build: ./frontend # specify the build context for the web service this is the directory where the Dockerfile for the web service is located
    ports:
      - 5173:5173 # specify the ports to expose for the web service, the first number is the port on the host machine, the second number is the port inside the container
    environment:
      VITE_API_URL: http://localhost:8000
    develop: # this is for docker compose watch mode anything mentioned under develop will be watched for changes by docker compose watch and it will perform the action mentioned
      watch:  # we specify the files to watch for changes
        - path: ./frontend/package.json # it'll watch for changes in package.json and package-lock.json and rebuild the container if there are any changes
          action: rebuild
        - path: ./frontend/package-lock.json
          action: rebuild
        - path: ./frontend # it'll watch for changes in the frontend directory and sync the changes with the container real time
          target: /app
          action: sync
  api: # define the api service/container
    depends_on: 
      - db
    build: ./backend # specify the build context for the api service
    ports: # specify the ports to expose for the api service, the first number is the port on the host machine, the second number is the port inside the container
      - 8000:8000
    environment: 
      DB_URL: mongodb://db/anime
    develop: # establish docker compose watch mode for the api service
      watch: # specify the files to watch for changes
        - path: ./backend/package.json # it'll watch for changes in package.json and package-lock.json and rebuild the container and image if there are any changes
          action: rebuild
        - path: ./backend/package-lock.json
          action: rebuild
        - path: ./backend # it'll watch for changes in the backend directory and sync the changes with the container real time
          target: /app
          action: sync

  
  db: # define the db service
    # specify the image to use for the db service from docker hub. If we have a custom image, we can specify that in this format
    # In the above two services, we're using the build context to build the image for the service from the Dockerfile so we specify the image as "build: ./frontend" or "build: ./backend".
    # but for the db service, we're using the image from docker hub so we specify the image as "image: mongo:latest"
    # you can find the image name and tag for mongodb from docker hub here: https://hub.docker.com/_/mongo
    image: mongo:latest

    # specify the ports to expose for the db service
    # generally, we do this in api service using mongodb atlas. But for demo purposes, we're using a local mongodb instance
    # usually, mongodb runs on port 27017. So we're exposing the port 27017 on the host machine and mapping it to the port 27017 inside the container
    ports:
      - 27017:27017

    # specify the volumes to mount for the db service
    # we're mounting the volume named "anime" inside the container at /data/db directory
    # this is done so that the data inside the mongodb container is persisted even if the container is stopped
    volumes:
      - anime:/data/db

# define the volumes to be used by the services
volumes:
  anime:
